diff --git a/CMakeLists.txt b/CMakeLists.txt
index 533beff8..4da3477e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -162,14 +162,17 @@ add_thirdparty_package(
 )
 
 # FIXME: This is a workaround until fix for dependencies of arch.xml patching script(s) is in place
-get_target_property(SDF_TIMING_TARGET env SDF_TIMING_TARGET)
-add_dependencies(all_conda ${SDF_TIMING_TARGET})
+if(${USE_CONDA})
+  get_target_property(SDF_TIMING_TARGET env SDF_TIMING_TARGET)
+  add_dependencies(all_conda ${SDF_TIMING_TARGET})
+endif()
 
 add_thirdparty_package(
   NAME vtr_xml_utils
   BUILD_INSTALL_COMMAND "cd ${symbiflow-arch-defs_SOURCE_DIR}/third_party/vtr-xml-utils && ${PYTHON3} setup.py develop"
   PROVIDES vtr_xml_utils
   DEPENDS ${PYTHON3} ${PYTHON3_TARGET}
+  NO_EXE
 )
 
 add_thirdparty_package(
diff --git a/common/cmake/env.cmake b/common/cmake/env.cmake
index 63fe5fda..75825be4 100644
--- a/common/cmake/env.cmake
+++ b/common/cmake/env.cmake
@@ -327,16 +327,22 @@ function(ADD_CONDA_PIP)
       )
     add_dependencies(clean_pip _clean_pip_${NAME})
   else()
-    if(DEFINED ENV{${binary_upper}})
-      set(${binary_upper} $ENV{${binary_upper}})
+    if(ADD_CONDA_PIP_NO_EXE)
+      add_custom_target(${NAME})
+      string(TOUPPER ${NAME} name_upper)
+      set_target_properties(env PROPERTIES ${name_upper}_TARGET ${NAME})
     else()
-      find_program(${binary_upper} ${NAME})
-    endif()
-    if(NOT ${binary_upper})
-      message(FATAL_ERROR "Could not find program ${NAME}.")
+      if(DEFINED ENV{${binary_upper}})
+        set(${binary_upper} $ENV{${binary_upper}})
+      else()
+        find_program(${binary_upper} ${NAME})
+      endif()
+      if(NOT ${binary_upper})
+        message(FATAL_ERROR "Could not find program ${NAME}.")
+      endif()
+      set_target_properties(env PROPERTIES ${binary_upper} ${${binary_upper}})
+      set_target_properties(env PROPERTIES ${binary_upper}_TARGET "")
     endif()
-    set_target_properties(env PROPERTIES ${binary_upper} ${${binary_upper}})
-    set_target_properties(env PROPERTIES ${binary_upper}_TARGET "")
   endif()
 endfunction()
 
@@ -426,6 +432,9 @@ function(ADD_THIRDPARTY_PACKAGE)
         ${binary_upper}_TARGET ${NAME})
     endforeach()
   else()
+    add_custom_target(${NAME})
+    string(TOUPPER ${NAME} name_upper)
+    set_target_properties(env PROPERTIES ${name_upper}_TARGET ${NAME})
     if(NOT ${ADD_THIRDPARTY_PACKAGE_NO_EXE})
       # if command not provide, just look the provides
       foreach(OUTPUT ${ADD_THIRDPARTY_PACKAGE_PROVIDES})
@@ -438,9 +447,12 @@ function(ADD_THIRDPARTY_PACKAGE)
         if(NOT ${binary_upper})
           message(FATAL_ERROR "Could not find program ${OUTPUT}.")
         endif()
+        if(NOT TARGET ${OUTPUT})
+          add_custom_target(${OUTPUT})
+        endif()
         set_target_properties(env PROPERTIES
           ${binary_upper} ${${binary_upper}}
-          ${binary_upper}_TARGET "")
+          ${binary_upper}_TARGET ${OUTPUT})
       endforeach()
     endif()
   endif()
diff --git a/common/cmake/util.cmake b/common/cmake/util.cmake
index b666fee4..1d173f3c 100644
--- a/common/cmake/util.cmake
+++ b/common/cmake/util.cmake
@@ -8,11 +8,5 @@ function(get_target_property_required var target property)
         "${property} not set for target ${target}, check target definition."
     )
   endif()
-  if("${PROP}" STREQUAL "")
-    message(
-      FATAL_ERROR
-        "${property} is empty for target ${target}, check target definition."
-    )
-  endif()
   set(${var} ${PROP} PARENT_SCOPE)
 endfunction()
diff --git a/ice40/devices/top-routing-virt/CMakeLists.txt b/ice40/devices/top-routing-virt/CMakeLists.txt
index 4ebcedc6..5d695026 100644
--- a/ice40/devices/top-routing-virt/CMakeLists.txt
+++ b/ice40/devices/top-routing-virt/CMakeLists.txt
@@ -2,7 +2,6 @@ add_subdirectory(tiles)
 
 add_file_target(FILE arch.xml SCANNER_TYPE xml)
 
-get_target_property_required(CONDA_DIR env CONDA_DIR)
 get_target_property_required(PYTHON3 env PYTHON3)
 get_target_property_required(PYTHON3_TARGET env PYTHON3_TARGET)
 get_target_property_required(ICESTORM_TARGET env ICESTORM_TARGET)
diff --git a/ice40/icestorm.cmake b/ice40/icestorm.cmake
index 4fe72ae2..b3be2dcc 100644
--- a/ice40/icestorm.cmake
+++ b/ice40/icestorm.cmake
@@ -5,7 +5,7 @@ function(icestorm_setup)
   set(ICESTORM_SRC ${symbiflow-arch-defs_SOURCE_DIR}/third_party/icestorm CACHE PATH "Path to icestorm repository")
   set(PYUTILS_PATH ${symbiflow-arch-defs_SOURCE_DIR}/utils:${symbiflow-arch-defs_SOURCE_DIR}/ice40/utils/fasm_icebox)
 
-  get_target_property_required(PYTHON_PREFIX env CONDA_DIR)
+  get_target_property(PYTHON_PREFIX env CONDA_DIR)
   set(ICESTORM_PREFIX "PREFIX=${PYTHON_PREFIX}")
 
   add_conda_package(
diff --git a/xc/xc7/tests/install_test/CMakeLists.txt b/xc/xc7/tests/install_test/CMakeLists.txt
index 06d11825..b5d568dd 100644
--- a/xc/xc7/tests/install_test/CMakeLists.txt
+++ b/xc/xc7/tests/install_test/CMakeLists.txt
@@ -1,3 +1,4 @@
+if(${USE_CONDA})
 set(INSTALLATION_DIR_BIN "${CMAKE_INSTALL_PREFIX}/bin")
 get_target_property_required(CONDA_DIR env CONDA_DIR)
 
@@ -13,3 +14,4 @@ add_test(NAME binary_toolchain_test
 	XRAY_DATABASE_DIR=${PRJXRAY_DB_DIR}
 	make
 	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
+endif()
diff --git a/xc/xc7/yosys/synth.tcl b/xc/xc7/yosys/synth.tcl
index 428ea9a1..f390d2fb 100644
--- a/xc/xc7/yosys/synth.tcl
+++ b/xc/xc7/yosys/synth.tcl
@@ -1,7 +1,7 @@
 yosys -import
 
-plugin -i xdc
-plugin -i fasm
+plugin -i $::env(YOSYS_SYMBIFLOW_PLUGINS)/xdc.so -a xdc
+plugin -i $::env(YOSYS_SYMBIFLOW_PLUGINS)/fasm.so -a fasm
 
 # Import the commands from the plugins to the tcl interpreter
 yosys -import
